Name: Levi Nava
FSUID: Lkn23a


Dates I went through the Git Lab Tutorials:2025-10-23
- Learn Git Branching (Main – Introduction Sequence): 2025-10-20
- Learn Git Branching (Remotes – Push & Pull): 2025-10-22
- Visualizing Git: 2025-10-23
- Extra try.github.io tutorial: 2025-10-23

Date I created my GitHub account (rough estimate if old): 2020-02

Repository URL (my fork):https://github.com/Daigon32/https-github.com-CEN4020-Fall-assignment2
(I have granted access to the instructor by [option a/b below].) I made it Public

-- Console output from step 3.C (git status) --
mkdir -p docs
git status > docs/status.txt

git add docs/status.txt
git commit -m "Add git status output to docs/status.txt


1) How many commits have been done to the repository so far?
Command used:
git rev-list --all --count



2) When was README.md last modified? Command used:
git log -1 --format="%cd" -- README.md
# or for an ISO date:
git log -1 --date=iso --pretty=format:"%cd" -- README.md

2025-10-23 05:22:45 

3) Mention two reasons why branches are used in a Git repository:
- Reason A: Isolation — branches let developers work on features/fixes without affecting the main branch.
- Reason B: Parallel development & safe experimentation — multiple branches allow concurrent work and easier merging/review.

4) What is the difference between git log and git status?
- git status shows the current working tree state: what’s staged, unstaged, untracked, and the branch HEAD.
- git log shows the commit history (past commits) for the repository/branch.

5) What command would you use to see the commits where "Vehicle.h" was one of the committed files?
Command:
git log --pretty=oneline --name-only -- Vehicle.h
# or to follow renames:
git log --follow --pretty=oneline -- Vehicle.h

6) What command would you use to see the commits whose commit message contains the word "file"?
Command:
git log --grep=file --all --pretty=oneline

7) OOP concepts:
I) What is inheritance?
- Code reuse and hierarchical relationships are made possible by inheritance, a process by which a class (subclass/derived) obtains fields and functions from another class (superclass/base).
II) What is polymorphism?
- Code can handle objects of multiple classes using a common interface thanks to polymorphism. For example, base-class pointers can refer to derived-class objects, and method calls can resolve to the proper implementation (dynamic dispatch).

III) What is encapsulation?
- Encapsulation protects internal state against misuse by grouping data and methods that work with it inside a class and regulating access to the data through visibility (private, protected, and public).



9) Main difference between "Dictator and Lieutenants" and "Integration manager" workflows:
- Dictator & Lieutenants: Lieutenants gather and inspect patches before sending them to the dictator, who is the only integrator (dictator) who makes decisions on what goes into the mainline.  With multiple lieutenants overseeing subareas, this central integrator model retains a single authoritative integrator.
- Integration Manager: Maintainers then transfer integrated modifications upstream when one or more integration managers incorporate contributors' pull requests and patches into their maintained branches.  By granting several managers authority over particular sectors, it decentralizes integration.

10) How would a team of 100 developers benefit from Dictator & Lieutenants instead of Centralized workflow?
- Dictator & Lieutenants scales better than a single-centralized repository owner with 100 developers. Lieutenants speed up review/merge, improve area ownership, and pre-vet changes, which lessens the integrator's workload.  Compared to a strictly centralized one-person integrator, it maintains control and quality with a single dictator while assigning review tasks to others, allowing contributions to flow more quickly and with fewer bottlenecks.
-- End of answers --
